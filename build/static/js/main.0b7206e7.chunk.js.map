{"version":3,"sources":["components/Clock.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getTime","date","Date","hours","getHours","minutes","getMinutes","concat","state","day","month","year","time","seconds","ampm","days","months","_this2","setInterval","setState","getDay","getMonth","getDate","getFullYear","getSeconds","react_default","a","createElement","className","Component","Weather","from","to","randomFrom","randomTo","timeToWork","getTimeToWork","console","log","axios","post","then","response","data","catch","error","randomizeAddress","randomA","Math","floor","random","randomB","splitFrom","split","splitTo","src","icon","alt","temperature","App","weather","max","min","getWeather","get","properties","round","value","src_components_Clock","src_components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b7206e7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Clock.css\";\nclass Clock extends Component {\n  constructor(props) {\n    super(props);\n    this.getTime = () => {\n      let date = new Date();\n      let hours = date.getHours();\n      let minutes = date.getMinutes();\n      if (hours > 12) {\n        hours = hours - 12;\n      }\n      if (hours < 10) {\n        hours = `0${hours}`;\n      }\n      if (minutes < 10) {\n        minutes = `0${minutes}`;\n      }\n      return `${hours}:${minutes}`;\n    };\n    this.state = {\n      day: \"\",\n      month: \"\",\n      date: \"\",\n      year: \"\",\n      time: \"\",\n      seconds: 0,\n      ampm: \"\"\n    };\n    this.days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\"\n    ];\n    this.months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\"\n    ];\n  }\n  componentDidMount() {\n    setInterval(() => {\n      let date = new Date();\n      this.setState({\n        day: date.getDay(),\n        month: date.getMonth(),\n        date: date.getDate(),\n        year: date.getFullYear(),\n        time: this.getTime(),\n        seconds:\n          date.getSeconds() < 10 ? `0${date.getSeconds()}` : date.getSeconds(),\n        ampm: date.getHours() < 12 ? \"am\" : \"pm\"\n      });\n    }, 1000);\n  }\n  render() {\n    return (\n      <div className=\"Clock\">\n        <div className=\"fullDate\">\n          <div>\n            <div className=\"day\">{this.days[this.state.day]}</div>\n            <div className=\"month\">{this.months[this.state.month]}</div>\n          </div>\n\n          <div className=\"date\">{this.state.date}</div>\n\n          <div className=\"year\">{this.state.year}</div>\n        </div>\n        <div className=\"fullTime\">\n          <div className=\"time\">{this.state.time}</div>\n\n          <div className=\"seconds\">\n            {this.state.seconds} <br />\n            <span className=\"amPm\">{this.state.ampm}</span>\n          </div>\n        </div>\n        <div />\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./Weather.css\";\n\nclass Weather extends Component {\n  state = {\n    from: \"8900 N Interstate 35 Austin TX 78753\",\n    to: \"8834 N Capital of Texas Hwy Austin TX\",\n    randomFrom: \"\",\n    randomTo: \"\",\n    timeToWork: \"Unknown\"\n  };\n\n  getTimeToWork = () => {\n    console.log(\"requesting time to work\");\n    console.log(this.state.randomFrom, this.state.randomTo);\n    axios\n      .post(\n        // \"http://from-to-api.herokuapp.com/\"\n        \"http://192.168.1.235:8080\",\n        {\n          from: this.state.from,\n          to: this.state.to\n        }\n      )\n      .then(response => {\n        console.log(response.data);\n        this.setState({ timeToWork: response.data.time });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  randomizeAddress = () => {\n    let randomA = \" \" + (Math.floor(Math.random() * 9999) + 1000);\n    let randomB = \" \" + (Math.floor(Math.random() * 9999) + 1000);\n    let splitFrom = this.state.from.split(\",\");\n    let splitTo = this.state.to.split(\",\");\n\n    this.setState({\n      randomFrom: splitFrom[0] + randomA + splitFrom[1],\n      randomTo: splitTo[0] + randomB + splitTo[1]\n    });\n  };\n\n  componentWillMount() {\n    this.randomizeAddress();\n  }\n  componentDidMount() {\n    this.randomizeAddress();\n    this.getTimeToWork();\n    setInterval(() => {\n      this.randomizeAddress();\n      this.getTimeToWork();\n    }, 5 * 60 * 1000);\n  }\n\n  render() {\n    return (\n      <div className=\"Weather\">\n        <div className=\"weatherImage\">\n          <img className=\"weatherIcon\" src={this.props.data.icon} alt=\"\" />\n        </div>\n        <div className=\"currentTemp\">\n          <div>{this.props.data.temperature}°F</div>\n          <div className=\"timeToWork\">\n            {this.state.timeToWork} Drive to Work\n          </div>\n        </div>\n        <div className=\"minMaxTemp\">\n          <div className=\"maxTemp\" />\n          ⬆800°<div className=\"minTemp\">⬇600°</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Weather;\n","import React, { Component } from \"react\";\nimport Clock from \"./components/Clock\";\nimport Weather from \"./components/Weather\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    weather: {\n      icon: \"\",\n      temperature: 0,\n      max: 0,\n      min: 0\n    }\n  };\n\n  getWeather = () => {\n    axios\n      .get(\n        \"https://api.weather.gov/stations/KAUS/observations/latest?require_qc=false\"\n      )\n      .then(response => {\n        console.log(response.data.properties);\n        this.setState({\n          weather: {\n            icon: response.data.properties.icon,\n            temperature: Math.round(\n              response.data.properties.temperature.value * (9 / 5) + 32\n            ),\n            max: 0,\n            min: 0\n          }\n        });\n      });\n  };\n  componentDidMount() {\n    this.getWeather();\n    setInterval(() => {\n      this.getWeather();\n    }, 10 * 60 * 1000);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div />\n        <Clock />\n        <br />\n        <br />\n        <Weather data={this.state.weather} />\n\n        <div />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}